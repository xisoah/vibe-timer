[{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\AddVibeDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\DatePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\EditVibeDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ResetTimersButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\TimeDistributionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\VibeCard.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'react-hooks/exhaustive-deps').","line":43,"column":3,"severity":1,"nodeType":null,"fix":{"range":[1400,1455],"text":" "}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'tick'. Either exclude it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [vibe.totalTime, vibe.isRunning, vibe.startTime]","fix":{"range":[1800,1854],"text":"[vibe.totalTime, vibe.isRunning, vibe.startTime]"}}]},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'react-hooks/exhaustive-deps').","line":57,"column":3,"severity":1,"nodeType":null,"fix":{"range":[1906,1961],"text":" "}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'tick'. Either exclude it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [vibe.isRunning, vibe.startTime]","fix":{"range":[2267,2305],"text":"[vibe.isRunning, vibe.startTime]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"\r\nimport React, { useMemo, useEffect, useState } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Pencil } from 'lucide-react';\r\nimport { formatTime, calculateElapsedTime } from '@/utils/timeUtils';\r\nimport { cn } from '@/lib/utils';\r\nimport { getVibeColor } from '@/utils/vibeColor';\r\nimport EditVibeDialog from '@/components/EditVibeDialog';\r\nimport { useVibe } from '@/contexts/VibeContext';\r\n\r\nimport { Vibe } from '@/types';\r\n\r\ninterface VibeCardProps {\r\n  vibe: Vibe;\r\n  disabled?: boolean;\r\n  onStart: (id: string) => void;\r\n  onStop: (id: string) => void;\r\n}\r\n\r\nconst VibeCard: React.FC<VibeCardProps> = ({ vibe, onStart, onStop, disabled }) => {\r\n  // Local state to force re-renders for timer display\r\n  const [tick, setTick] = useState(0);\r\n  const { editVibe } = useVibe();\r\n  const [editOpen, setEditOpen] = useState(false);\r\n\r\n  // Set up interval for updating the timer display\r\n  useEffect(() => {\r\n    let intervalId: NodeJS.Timeout | null = null;\r\n    \r\n    if (vibe.isRunning && vibe.startTime) {\r\n      intervalId = setInterval(() => {\r\n        setTick(prev => prev + 1);\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (intervalId) clearInterval(intervalId);\r\n    };\r\n  }, [vibe.isRunning, vibe.startTime]);\r\n\r\n  // Calculate the current display time (total + session if running)\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // 'tick' is a necessary dependency to update the timer display every second\r\n  const displayTime = useMemo(() => {\r\n    let time = vibe.totalTime;\r\n    \r\n    if (vibe.isRunning && vibe.startTime) {\r\n      const sessionTime = calculateElapsedTime(vibe.startTime);\r\n      time += sessionTime;\r\n    }\r\n    \r\n    return formatTime(time);\r\n  }, [vibe.totalTime, vibe.isRunning, vibe.startTime, tick]);\r\n\r\n  // Calculate the session time if running\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // 'tick' is a necessary dependency to update the session timer every second\r\n  const sessionTime = useMemo(() => {\r\n    if (vibe.isRunning && vibe.startTime) {\r\n      const sessionTime = calculateElapsedTime(vibe.startTime);\r\n      return formatTime(sessionTime);\r\n    }\r\n    return '00:00:00';\r\n  }, [vibe.isRunning, vibe.startTime, tick]);\r\n\r\n  // Handle start/stop button click\r\n  const handleTimerToggle = () => {\r\n    if (vibe.isRunning) {\r\n      onStop(vibe.id);\r\n    } else {\r\n      onStart(vibe.id);\r\n    }\r\n  };\r\n\r\n  // Get color class using shared utility\r\n  const vibeColor = getVibeColor(vibe.id, vibe.name);\r\n\r\n\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        \"relative overflow-hidden transition-all duration-300 shadow-md hover:shadow-lg\",\r\n        vibe.isRunning && \"ring-2 ring-primary animate-pulse-light\",\r\n        disabled ? \"opacity-60 cursor-not-allowed pointer-events-none\" : \"\"\r\n      )}\r\n      style={{ backgroundColor: vibeColor.hex }}\r\n    >\r\n      <div \r\n        className={cn(\r\n          \"absolute top-0 left-0 w-1 h-full\"\r\n        )} \r\n        style={{ backgroundColor: vibeColor.hex }}\r\n        aria-hidden=\"true\"\r\n      />\r\n      <CardContent className=\"pt-6 relative\">\r\n        {/* Full-card button for timer toggle, except edit button */}\r\n        {!disabled && (\r\n          <button\r\n            type=\"button\"\r\n            aria-label={vibe.isRunning ? 'Stop Timer' : 'Start Timer'}\r\n            aria-pressed={vibe.isRunning}\r\n            tabIndex={0}\r\n            className=\"absolute inset-0 w-full h-full z-0 bg-transparent border-none p-0 m-0 cursor-pointer focus:outline-none\"\r\n            onClick={handleTimerToggle}\r\n            onKeyDown={e => {\r\n              if (e.key === 'Enter' || e.key === ' ') handleTimerToggle();\r\n            }}\r\n          />\r\n        )}\r\n        <div className=\"flex justify-between items-center mb-2 relative z-10\">\r\n          <h3 className=\"text-lg font-medium\">{vibe.name}</h3>\r\n          {!disabled && (\r\n            <Button\r\n              type=\"button\"\r\n              size=\"icon\"\r\n              variant=\"ghost\"\r\n              aria-label=\"Edit Vibe\"\r\n              className=\"ml-2 z-20\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                setEditOpen(true);\r\n              }}\r\n            >\r\n              <Pencil className=\"w-4 h-4\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div className=\"space-y-2 relative z-10\">\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            Session: <span className=\"font-mono\">{sessionTime}</span>\r\n          </div>\r\n          <div className=\"text-xl font-mono font-bold\">\r\n            {displayTime}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n      <EditVibeDialog\r\n        open={editOpen}\r\n        onOpenChange={setEditOpen}\r\n        initialName={vibe.name}\r\n        initialColor={vibe.color}\r\n        onSubmit={(newName, newColor) => editVibe(vibe.id, newName, newColor)}\r\n        vibeId={vibe.id}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default VibeCard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\VibeDataTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\colorOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\badgeVariants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\buttonVariants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nimport { Form } from './formProvider';\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\formProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\navigationMenuTriggerStyle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { PanelLeft } from \"lucide-react\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\r\nimport { Skeleton } from \"@/components/ui/skeleton\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\"\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\r\nconst SIDEBAR_WIDTH = \"16rem\"\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\"\r\n  open: boolean\r\n  setOpen: (open: boolean) => void\r\n  openMobile: boolean\r\n  setOpenMobile: (open: boolean) => void\r\n  isMobile: boolean\r\n  toggleSidebar: () => void\r\n}\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext)\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean\r\n    open?: boolean\r\n    onOpenChange?: (open: boolean) => void\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const isMobile = useIsMobile()\r\n    const [openMobile, setOpenMobile] = React.useState(false)\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen)\r\n    const open = openProp ?? _open\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === \"function\" ? value(open) : value\r\n        if (setOpenProp) {\r\n          setOpenProp(openState)\r\n        } else {\r\n          _setOpen(openState)\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\r\n      },\r\n      [setOpenProp, open]\r\n    )\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile\r\n        ? setOpenMobile((open) => !open)\r\n        : setOpen((open) => !open)\r\n    }, [isMobile, setOpen, setOpenMobile])\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (\r\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)\r\n        ) {\r\n          event.preventDefault()\r\n          toggleSidebar()\r\n        }\r\n      }\r\n\r\n      window.addEventListener(\"keydown\", handleKeyDown)\r\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\r\n    }, [toggleSidebar])\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? \"expanded\" : \"collapsed\"\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\r\n    )\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH,\r\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\r\n              className\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    )\r\n  }\r\n)\r\nSidebarProvider.displayName = \"SidebarProvider\"\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\"\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = \"left\",\r\n      variant = \"sidebar\",\r\n      collapsible = \"offcanvas\",\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\r\n\r\n    if (collapsible === \"none\") {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\r\n            className\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\r\n            \"group-data-[collapsible=offcanvas]:w-0\",\r\n            \"group-data-[side=right]:rotate-180\",\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\r\n            side === \"left\"\r\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nSidebar.displayName = \"Sidebar\"\r\n\r\nconst SidebarTrigger = React.forwardRef<\r\n  React.ElementRef<typeof Button>,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, onClick, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      data-sidebar=\"trigger\"\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      className={cn(\"h-7 w-7\", className)}\r\n      onClick={(event) => {\r\n        onClick?.(event)\r\n        toggleSidebar()\r\n      }}\r\n      {...props}\r\n    >\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>\r\n  )\r\n})\r\nSidebarTrigger.displayName = \"SidebarTrigger\"\r\n\r\nconst SidebarRail = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\">\r\n>(({ className, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      data-sidebar=\"rail\"\r\n      aria-label=\"Toggle Sidebar\"\r\n      tabIndex={-1}\r\n      onClick={toggleSidebar}\r\n      title=\"Toggle Sidebar\"\r\n      className={cn(\r\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\r\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarRail.displayName = \"SidebarRail\"\r\n\r\nconst SidebarInset = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"main\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInset.displayName = \"SidebarInset\"\r\n\r\nconst SidebarInput = React.forwardRef<\r\n  React.ElementRef<typeof Input>,\r\n  React.ComponentProps<typeof Input>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Input\r\n      ref={ref}\r\n      data-sidebar=\"input\"\r\n      className={cn(\r\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInput.displayName = \"SidebarInput\"\r\n\r\nconst SidebarHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"header\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarHeader.displayName = \"SidebarHeader\"\r\n\r\nconst SidebarFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"footer\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarFooter.displayName = \"SidebarFooter\"\r\n\r\nconst SidebarSeparator = React.forwardRef<\r\n  React.ElementRef<typeof Separator>,\r\n  React.ComponentProps<typeof Separator>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarSeparator.displayName = \"SidebarSeparator\"\r\n\r\nconst SidebarContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarContent.displayName = \"SidebarContent\"\r\n\r\nconst SidebarGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroup.displayName = \"SidebarGroup\"\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"div\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\r\n\r\nconst SidebarGroupContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"group-content\"\r\n    className={cn(\"w-full text-sm\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\r\n\r\nconst SidebarMenu = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu\"\r\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenu.displayName = \"SidebarMenu\"\r\n\r\nconst SidebarMenuItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li\r\n    ref={ref}\r\n    data-sidebar=\"menu-item\"\r\n    className={cn(\"group/menu-item relative\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    isActive?: boolean\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const { isMobile, state } = useSidebar()\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    )\r\n\r\n    if (!tooltip) {\r\n      return button\r\n    }\r\n\r\n    if (typeof tooltip === \"string\") {\r\n      tooltip = {\r\n        children: tooltip,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== \"collapsed\" || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }\r\n)\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    showOnHover?: boolean\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\r\n\r\nconst SidebarMenuBadge = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"menu-badge\"\r\n    className={cn(\r\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\r\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n      \"peer-data-[size=sm]/menu-button:top-1\",\r\n      \"peer-data-[size=default]/menu-button:top-1.5\",\r\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && (\r\n        <Skeleton\r\n          className=\"size-4 rounded-md\"\r\n          data-sidebar=\"menu-skeleton-icon\"\r\n        />\r\n      )}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n})\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\r\n\r\nconst SidebarMenuSub = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu-sub\"\r\n    className={cn(\r\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean\r\n    size?: \"sm\" | \"md\"\r\n    isActive?: boolean\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\r\nimport { Toaster as Sonner, toast } from \"sonner\"\r\n\r\ntype ToasterProps = React.ComponentProps<typeof Sonner>\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme()\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      toastOptions={{\r\n        classNames: {\r\n          toast:\r\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\r\n          description: \"group-[.toast]:text-muted-foreground\",\r\n          actionButton:\r\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\r\n          cancelButton:\r\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Toaster, toast }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,164],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface TextareaProps\r\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <textarea\r\n        className={cn(\r\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nTextarea.displayName = \"Textarea\"\r\n\r\nexport { Textarea }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root\r\n    ref={ref}\r\n    className={cn(toggleVariants({ variant, size, className }))}\r\n    {...props}\r\n  />\r\n))\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName\r\n\r\nexport { Toggle, toggleVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\contexts\\VibeContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has a missing dependency: 'setDailyVibeData'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDate, dailyVibeData, availableVibes, setDailyVibeData]","fix":{"range":[3181,3226],"text":"[selectedDate, dailyVibeData, availableVibes, setDailyVibeData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'isToday'. Either include it or remove the dependency array.","line":219,"column":6,"nodeType":"ArrayExpression","endLine":219,"endColumn":80,"suggestions":[{"desc":"Update the dependencies array to be: [isToday, availableVibes, setAvailableVibes, selectedDate, setDailyVibeData, toast]","fix":{"range":[7464,7538],"text":"[isToday, availableVibes, setAvailableVibes, selectedDate, setDailyVibeData, toast]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'isToday' and 'toast'. Either include them or remove the dependency array.","line":269,"column":6,"nodeType":"ArrayExpression","endLine":269,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [isToday, selectedDate, setDailyVibeData, refreshTimers, toast, runningVibe]","fix":{"range":[9314,9374],"text":"[isToday, selectedDate, setDailyVibeData, refreshTimers, toast, runningVibe]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'isToday' and 'toast'. Either include them or remove the dependency array.","line":307,"column":6,"nodeType":"ArrayExpression","endLine":307,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [isToday, selectedDate, setDailyVibeData, refreshTimers, toast]","fix":{"range":[10582,10629],"text":"[isToday, selectedDate, setDailyVibeData, refreshTimers, toast]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'isToday' and 'toast'. Either include them or remove the dependency array.","line":335,"column":6,"nodeType":"ArrayExpression","endLine":335,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [isToday, selectedDate, setDailyVibeData, refreshTimers, toast]","fix":{"range":[11388,11435],"text":"[isToday, selectedDate, setDailyVibeData, refreshTimers, toast]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":360,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":360,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { createContext, useState, useContext, useEffect, ReactNode, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Vibe, DailyVibeData } from '@/types';\nimport { useLocalStorage } from '@/hooks/useLocalStorage';\nimport { formatDateToString, calculateElapsedTime } from '@/utils/timeUtils';\n\n// Default vibes that will be loaded on first use\nconst DEFAULT_VIBES = [\n  { id: uuidv4(), name: \"Work\", color: '#0EA5E9', totalTime: 0, sessionTime: 0, isRunning: false, startTime: null },\n  { id: uuidv4(), name: \"Study\", color: '#9b87f5', totalTime: 0, sessionTime: 0, isRunning: false, startTime: null },\n  { id: uuidv4(), name: \"Exercise\", color: '#10B981', totalTime: 0, sessionTime: 0, isRunning: false, startTime: null },\n  { id: uuidv4(), name: \"Social\", color: '#F97316', totalTime: 0, sessionTime: 0, isRunning: false, startTime: null },\n  { id: uuidv4(), name: \"Self-care\", color: '#D946EF', totalTime: 0, sessionTime: 0, isRunning: false, startTime: null },\n];\n\ninterface VibeContextType {\n  availableVibes: Vibe[];\n  addVibe: (name: string, color: string) => void;\n  editVibe: (vibeId: string, newName: string, newColor: string) => void;\n  deleteVibe: (vibeId: string) => void;\n  selectedDate: Date;\n  setSelectedDate: (date: Date) => void;\n  startTimer: (vibeId: string) => void;\n  stopTimer: (vibeId: string) => void;\n  selectedDateVibes: Vibe[];\n  runningVibe: Vibe | null;\n  refreshTimers: () => void;\n  resetAllTimers: () => void;\n  isToday: boolean;\n}\n\nconst VibeContext = createContext<VibeContextType | undefined>(undefined);\n\ninterface VibeProviderProps {\n  children: ReactNode;\n}\n\nexport const VibeProvider: React.FC<VibeProviderProps> = ({ children }) => {\n  const { toast } = useToast();\n  \n  // Store the list of all available vibes\n  const [availableVibes, setAvailableVibes] = useLocalStorage<Vibe[]>('availableVibes', DEFAULT_VIBES);\n  // Store daily vibe data records\n  const [dailyVibeData, setDailyVibeData] = useLocalStorage<DailyVibeData[]>('dailyVibeData', []);\n  // Currently selected date\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  // Reference to any currently running timer\n  const [runningVibe, setRunningVibe] = useState<Vibe | null>(null);\n  // Force component refreshes for active timers\n  const [refreshCounter, setRefreshCounter] = useState(0);\n\n  // Get vibes for the currently selected date\n  const selectedDateVibes = React.useMemo(() => {\n    const formattedDate = formatDateToString(selectedDate);\n    const dailyData = dailyVibeData.find(data => data.date === formattedDate);\n    \n    if (dailyData) {\n      return dailyData.vibes;\n    } else {\n      // If no data exists for the selected date, create a new entry with the available vibes\n      const newVibes = availableVibes.map(vibe => ({\n        ...vibe,\n        totalTime: 0,\n        sessionTime: 0,\n        isRunning: false,\n        startTime: null\n      }));\n      \n      const newDailyData = {\n        date: formattedDate,\n        vibes: newVibes\n      };\n      \n      setDailyVibeData(prevData => [...prevData, newDailyData]);\n      return newVibes;\n    }\n  }, [selectedDate, dailyVibeData, availableVibes]);\n\n  // Force refresh of all timers (used for updating UI)\n  const refreshTimers = useCallback(() => {\n    setRefreshCounter(prev => prev + 1);\n  }, []);\n\n  // Check on load if any timer was running and restore it\n  useEffect(() => {\n    // Find any running timer from the selected date\n    const formattedDate = formatDateToString(selectedDate);\n    const dailyData = dailyVibeData.find(data => data.date === formattedDate);\n    \n    if (dailyData) {\n      const runningVibeFromData = dailyData.vibes.find(vibe => vibe.isRunning);\n      \n      if (runningVibeFromData && runningVibeFromData.startTime) {\n        setRunningVibe(runningVibeFromData);\n      } else {\n        setRunningVibe(null);\n      }\n    } else {\n      setRunningVibe(null);\n    }\n  }, [selectedDate, dailyVibeData]);\n\n  // Helper to check if selectedDate is today\n  const isToday = React.useMemo(() => {\n    const now = new Date();\n    return selectedDate.getFullYear() === now.getFullYear() &&\n      selectedDate.getMonth() === now.getMonth() &&\n      selectedDate.getDate() === now.getDate();\n  }, [selectedDate]);\n\n  // Delete a vibe from availableVibes and from the selected date\n  const deleteVibe = useCallback((vibeId: string) => {\n    // Remove from availableVibes\n    setAvailableVibes(prev => prev.filter(v => v.id !== vibeId));\n    // Remove from today's vibes\n    const formattedDate = formatDateToString(selectedDate);\n    setDailyVibeData(prevData => prevData.map(day => {\n      if (day.date !== formattedDate) return day;\n      return {\n        ...day,\n        vibes: day.vibes.filter(v => v.id !== vibeId)\n      };\n    }));\n    toast({\n      title: \"Vibe Deleted\",\n      description: `Vibe has been deleted.`,\n      variant: \"default\"\n    });\n    refreshTimers();\n  }, [selectedDate, setAvailableVibes, setDailyVibeData, refreshTimers, toast]);\n\n  // Edit a vibe for the selected date\n  const editVibe = useCallback((vibeId: string, newName: string, newColor: string) => {\n    const formattedDate = formatDateToString(selectedDate);\n    let found = false;\n    setDailyVibeData(prevData => prevData.map(day => {\n      if (day.date !== formattedDate) return day;\n      const newVibes = day.vibes.map(vibe => {\n        if (vibe.id === vibeId) {\n          found = true;\n          return { ...vibe, name: newName, color: newColor };\n        }\n        return vibe;\n      });\n      return { ...day, vibes: newVibes };\n    }));\n    if (found) {\n      toast({\n        title: \"Vibe Updated\",\n        description: `Vibe name changed to '${newName}'.`,\n        variant: \"default\"\n      });\n    } else {\n      toast({\n        title: \"Vibe Not Found\",\n        description: \"Could not find the vibe to edit.\",\n        variant: \"destructive\"\n      });\n    }\n    refreshTimers();\n  }, [selectedDate, setDailyVibeData, refreshTimers, toast]);\n\n  // Add a new vibe\n  const addVibe = useCallback((name: string, color: string) => {\n    if (!isToday) {\n      toast({\n        title: \"View Only\",\n        description: \"You can only add vibes for today.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    // Check if the name already exists (case insensitive)\n    const nameExists = availableVibes.some(\n      vibe => vibe.name.toLowerCase() === name.toLowerCase()\n    );\n    \n    if (nameExists) {\n      toast({\n        title: \"Vibe already exists\",\n        description: `A vibe named \"${name}\" already exists.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const newVibe: Vibe = {\n      id: uuidv4(),\n      name,\n      color,\n      totalTime: 0,\n      sessionTime: 0,\n      isRunning: false,\n      startTime: null\n    };\n    \n    // Add to available vibes\n    setAvailableVibes(prevVibes => [...prevVibes, newVibe]);\n    \n    // Add to the current day's vibes\n    const formattedDate = formatDateToString(selectedDate);\n    setDailyVibeData(prevData => {\n      const updatedData = [...prevData];\n      const dayIndex = updatedData.findIndex(data => data.date === formattedDate);\n      \n      if (dayIndex >= 0) {\n        updatedData[dayIndex].vibes.push({ ...newVibe });\n      }\n      \n      return updatedData;\n    });\n    \n    toast({\n      title: \"Vibe added\",\n      description: `New vibe \"${name}\" has been added.`\n    });\n  }, [availableVibes, selectedDate, toast, setAvailableVibes, setDailyVibeData]);\n\n  // Start a timer for a specific vibe\n  const startTimer = useCallback((vibeId: string) => {\n    if (!isToday) {\n      toast({\n        title: \"View Only\",\n        description: \"You can only start timers for today.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    const formattedDate = formatDateToString(selectedDate);\n    \n    setDailyVibeData(prevData => {\n      const updatedData = prevData.map(day => {\n        if (day.date !== formattedDate) return day;\n        // Deep clone the vibes array\n        const newVibes = day.vibes.map(vibe => ({ ...vibe }));\n        // Stop any currently running timer first\n        if (runningVibe) {\n          const runningVibeIndex = newVibes.findIndex(vibe => vibe.id === runningVibe.id);\n          if (runningVibeIndex >= 0 && newVibes[runningVibeIndex].isRunning) {\n            const elapsedTime = calculateElapsedTime(newVibes[runningVibeIndex].startTime || 0);\n            newVibes[runningVibeIndex] = {\n              ...newVibes[runningVibeIndex],\n              totalTime: newVibes[runningVibeIndex].totalTime + elapsedTime,\n              sessionTime: 0,\n              isRunning: false,\n              startTime: null,\n            };\n          }\n        }\n        // Start the new timer\n        const vibeIndex = newVibes.findIndex(vibe => vibe.id === vibeId);\n        if (vibeIndex >= 0) {\n          newVibes[vibeIndex] = {\n            ...newVibes[vibeIndex],\n            isRunning: true,\n            startTime: Date.now(),\n          };\n          // Update running vibe reference\n          setRunningVibe({ ...newVibes[vibeIndex] });\n        }\n        return { ...day, vibes: newVibes };\n      });\n      return updatedData;\n    });\n    // Force refresh for chart and other consumers\n    refreshTimers();\n  }, [selectedDate, runningVibe, setDailyVibeData, refreshTimers]);\n\n  // Stop a timer for a specific vibe\n  const stopTimer = useCallback((vibeId: string) => {\n    if (!isToday) {\n      toast({\n        title: \"View Only\",\n        description: \"You can only stop timers for today.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    const formattedDate = formatDateToString(selectedDate);\n    \n    setDailyVibeData(prevData => {\n  const updatedData = prevData.map(day => {\n    if (day.date !== formattedDate) return day;\n    // Deep clone the vibes array\n    const newVibes = day.vibes.map(vibe => ({ ...vibe }));\n    const vibeIndex = newVibes.findIndex(vibe => vibe.id === vibeId);\n    if (vibeIndex >= 0 && newVibes[vibeIndex].isRunning) {\n      const elapsedTime = calculateElapsedTime(newVibes[vibeIndex].startTime || 0);\n      newVibes[vibeIndex] = {\n        ...newVibes[vibeIndex],\n        totalTime: newVibes[vibeIndex].totalTime + elapsedTime,\n        sessionTime: 0,\n        isRunning: false,\n        startTime: null,\n      };\n      // Clear running vibe reference\n      setRunningVibe(null);\n    }\n    return { ...day, vibes: newVibes };\n  });\n  return updatedData;\n});\n    // Force refresh for chart and other consumers\n    refreshTimers();\n  }, [selectedDate, setDailyVibeData, refreshTimers]);\n\n  // Reset all timers for the selected date\n  const resetAllTimers = useCallback(() => {\n    if (!isToday) {\n      toast({\n        title: \"View Only\",\n        description: \"You can only reset timers for today.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    const formattedDate = formatDateToString(selectedDate);\n    setDailyVibeData(prevData => {\n      return prevData.map(day => {\n        if (day.date !== formattedDate) return day;\n        const newVibes = day.vibes.map(vibe => ({\n          ...vibe,\n          isRunning: false,\n          sessionTime: 0,\n          totalTime: 0,\n          startTime: null\n        }));\n        return { ...day, vibes: newVibes };\n      });\n    });\n    setRunningVibe(null);\n    refreshTimers();\n  }, [selectedDate, setDailyVibeData, refreshTimers]);\n\n  return (\n    <VibeContext.Provider\n      value={{\n        availableVibes,\n        addVibe,\n        editVibe,\n        deleteVibe,\n        selectedDate,\n        setSelectedDate,\n        startTimer,\n        stopTimer,\n        selectedDateVibes,\n        runningVibe,\n        refreshTimers,\n        resetAllTimers,\n        isToday\n      }}\n    >\n      {children}\n    </VibeContext.Provider>\n  );\n};\n\nexport const useVibe = () => {\n  const context = useContext(VibeContext);\n  if (context === undefined) {\n    throw new Error('useVibe must be used within a VibeProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\hooks\\useLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\utils\\timeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\utils\\vibeColor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":100,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":100,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport type { Config } from \"tailwindcss\";\r\n\r\nexport default {\r\n\tdarkMode: [\"class\"],\r\n\tcontent: [\r\n\t\t\"./pages/**/*.{ts,tsx}\",\r\n\t\t\"./components/**/*.{ts,tsx}\",\r\n\t\t\"./app/**/*.{ts,tsx}\",\r\n\t\t\"./src/**/*.{ts,tsx}\",\r\n\t],\r\n\tprefix: \"\",\r\n\ttheme: {\r\n\t\tcontainer: {\r\n\t\t\tcenter: true,\r\n\t\t\tpadding: '2rem',\r\n\t\t\tscreens: {\r\n\t\t\t\t'2xl': '1400px'\r\n\t\t\t}\r\n\t\t},\r\n\t\textend: {\r\n\t\t\tcolors: {\r\n\t\t\t\tborder: 'hsl(var(--border))',\r\n\t\t\t\tinput: 'hsl(var(--input))',\r\n\t\t\t\tring: 'hsl(var(--ring))',\r\n\t\t\t\tbackground: 'hsl(var(--background))',\r\n\t\t\t\tforeground: 'hsl(var(--foreground))',\r\n\t\t\t\tprimary: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\r\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\tsecondary: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\r\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\tdestructive: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\r\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\tmuted: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\r\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\taccent: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\r\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\tpopover: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\r\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\tcard: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\r\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\r\n\t\t\t\t},\r\n\t\t\t\tsidebar: {\r\n\t\t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\r\n\t\t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\r\n\t\t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\r\n\t\t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\r\n\t\t\t\t\taccent: 'hsl(var(--sidebar-accent))',\r\n\t\t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\r\n\t\t\t\t\tborder: 'hsl(var(--sidebar-border))',\r\n\t\t\t\t\tring: 'hsl(var(--sidebar-ring))'\r\n\t\t\t\t},\r\n\t\t\t\tvibe: {\r\n\t\t\t\t\tpurple: '#9b87f5',\r\n\t\t\t\t\tpink: '#D946EF',\r\n\t\t\t\t\torange: '#F97316',\r\n\t\t\t\t\tblue: '#0EA5E9',\r\n\t\t\t\t\tgreen: '#10B981',\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tborderRadius: {\r\n\t\t\t\tlg: 'var(--radius)',\r\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\r\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\r\n\t\t\t},\r\n\t\t\tkeyframes: {\r\n\t\t\t\t'accordion-down': {\r\n\t\t\t\t\tfrom: { height: '0' },\r\n\t\t\t\t\tto: { height: 'var(--radix-accordion-content-height)' }\r\n\t\t\t\t},\r\n\t\t\t\t'accordion-up': {\r\n\t\t\t\t\tfrom: { height: 'var(--radix-accordion-content-height)' },\r\n\t\t\t\t\tto: { height: '0' }\r\n\t\t\t\t},\r\n\t\t\t\t'pulse-light': {\r\n\t\t\t\t\t'0%, 100%': { opacity: '1' },\r\n\t\t\t\t\t'50%': { opacity: '0.85' }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tanimation: {\r\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\r\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out',\r\n\t\t\t\t'pulse-light': 'pulse-light 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tplugins: [require(\"tailwindcss-animate\")],\r\n} satisfies Config;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\sohai\\OneDrive\\Desktop\\VibeTimer\\vibe-time-tracker-flow\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]